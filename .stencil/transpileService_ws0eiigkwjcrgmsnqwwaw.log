{"moduleFile":{"sourceFilePath":"/Users/johnbreau/github/books-app-stencil/src/components/books-component/books-component.tsx","localImports":[],"externalImports":["@stencil/core"],"potentialCmpRefs":[],"cmpMeta":{"tagNameMeta":"books-component","stylesMeta":{},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"BooksComponent","tags":[],"documentation":"","type":"typeof BooksComponent"},"encapsulationMeta":0,"componentClass":"BooksComponent","membersMeta":{"time":{"memberType":16}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/johnbreau/github/books-app-stencil/src/components/books-component/books-component.js"},"jsText":"export class BooksComponent {\r\n    constructor() {\r\n        this.time = Date.now();\r\n    }\r\n    //\r\n    // componentWillLoad() {\r\n    //   fetch('http://openlibrary.org/recentchanges.json?author=/people/anand&offset=20&limit=20')\r\n    //     .then((response: Response) => response.json())\r\n    //     .then(response => {\r\n    //       this.content = response;\r\n    //       console.log('content', this.content);\r\n    //     });\r\n    // }\r\n    componentWillLoad() {\r\n        this.postData(this.openLibURL)\r\n            .then(data => console.log(JSON.stringify(data))) // JSON-string from `response.json()` call\r\n            .catch(error => console.error(error));\r\n    }\r\n    postData(url = ``, data = {}) {\r\n        // Default options are marked with *\r\n        return fetch(url, {\r\n            method: \"POST\",\r\n            mode: \"cors\",\r\n            cache: \"no-cache\",\r\n            credentials: \"same-origin\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            redirect: \"follow\",\r\n            referrer: \"no-referrer\",\r\n            body: JSON.stringify(data),\r\n        })\r\n            .then(response => response.json()); // parses JSON response into native Javascript objects\r\n    }\r\n    componentDidLoad() {\r\n        this.timer = window.setInterval(() => {\r\n            this.time = Date.now();\r\n        }, 1000);\r\n    }\r\n    componentDidUnload() {\r\n        window.clearInterval(this.timer);\r\n    }\r\n    render() {\r\n        const time = new Date(this.time).toLocaleTimeString();\r\n        return (h(\"span\", null, time));\r\n    }\r\n    static get is() { return \"books-component\"; }\r\n    static get properties() { return {\r\n        \"time\": {\r\n            \"state\": true\r\n        }\r\n    }; }\r\n}\r\n"}